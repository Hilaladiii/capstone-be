generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User{
  userId String @id @default(uuid())
  email String @unique
  fullname String 
  username String
  password String  
  profileImageUrl String?

  student Student?
  lecturer Lecturer?
  academic Academic?

  roles Role[]

  @@map("users")
}


model Role{
  roleId String @id @default(uuid())
  roleName String
  
  users User[]

  @@map("roles")
}

model Student{
  nim String @id 
  sks Int @db.UnsignedInt
  year Int @db.UnsignedInt

  userId String @unique
  user User @relation(fields: [userId], references: [userId],onDelete: Cascade)

  supervisorNip String? 
  lecturer Lecturer? @relation(fields: [supervisorNip],references: [nip])

  consultations Consultation[]
  
  
  logbooks Logbook[]
  documents Document[]

  announcementReads AnnouncementRead[]


  @@map("students")
}

model Lecturer{
  nip String @id 

  userId String @unique
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  students Student[]

  @@map("lecturers")
}

model Academic{
  nip String @id 

  userId String @unique
  user User @relation(fields: [userId], references: [userId],onDelete: Cascade)
  annoucements Announcement[]  

  @@map("academics")
}

model Announcement{
  announcementId String @id @default(uuid())
  title String
  content String @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime?
  imageUrl String?
  fileUrl String?

  academicNip String
  academic Academic @relation(fields: [academicNip],references: [nip])

  announcementReads AnnouncementRead[]

  @@map("announcements")
}

enum Status{
  UNREAD
  READ
}

model AnnouncementRead{
  id String @id @default(uuid())
  status Status @default(UNREAD)
  readAt DateTime?

  studentNim String
  student Student @relation(fields: [studentNim],references: [nim])

  announcementId String
  announcement Announcement @relation(fields: [announcementId],references: [announcementId])

  @@unique([studentNim,announcementId])
  @@map("announcementReads")
}


model Logbook{
  logbookId String @id @default(uuid())
  description String
  imageUrl String
  imageOriginalName String
  createdAt DateTime @default(now())
  updatedAt DateTime?

  nim String  
  student Student @relation(fields: [nim],references: [nim],onDelete: Cascade)


  @@map("logbooks")
}

enum ConsultationStatus{
  PENDING
  ACCEPTED
  REJECTED
}
model Consultation{
  consultationId String @id @default(uuid())
  fullname String
  nim String
  agencyName String
  position String
  activityDescription String
  createdAt DateTime @default(now())
  note String?
  agreementStatus ConsultationStatus @default(PENDING)

  studentNim String
  student Student @relation(fields: [studentNim], references: [nim])

  @@map("consultations")
}

enum DocumentStatus{
  SUCCESS
  FAILED
  AWAITING_ACADEMIC_REVIEW
  AWAITING_LECTURER_SIGN
}

model Document{
  documentId String @id @default(uuid())
  name String
  nim String
  phoneNumber String
  totalSks String
  email String
  nameOfAgency String
  agencyAddress String
  createdAt DateTime @default(now())
  status DocumentStatus @default(AWAITING_ACADEMIC_REVIEW)
  rejectionReason String? @db.Text

  studentNim String
  student Student @relation(fields: [studentNim],references: [nim])

  internshipApplication InternshipApplication?
  internshipExtension InternshipExtension?
  internshipCancellation InternshipCancellation?
  
  @@map("documents")
}

enum InternshipType {
  COMPANY
  COMPETITION
}

model InternshipApplication{
  documentId String @id
  type InternshipType
  recipientOfLetter String
  internshipObject String
  startDate DateTime
  studyResultCardUrl String

  document Document @relation(fields: [documentId], references: [documentId], onDelete: Cascade)


  @@map("internshipAppilcations")
}

model InternshipExtension{
  documentId String @id
  startDate DateTime
  submissionDate DateTime
  reasonExtension String @db.Text
  internshipApplicationFileUrl String
  internshipExtensionFileUrl String

  document Document @relation(fields: [documentId],references: [documentId],onDelete: Cascade)

  @@map("internshipExtensions")
}

model InternshipCancellation{
  documentId String @id
  recipientOfLetter String
  reasonCancellation String @db.Text

  document Document @relation(fields: [documentId],references: [documentId],onDelete: Cascade)
  supportingDocumentUrl String


  @@map("internshipCancellations")
}

model Partner {
  partnerId String @id @default(uuid())
  name String 
  address String
  description String
  partnerUrl String
  logoUrl String?
  createdAt DateTime @default(now())  

  @@map("partners")
}
