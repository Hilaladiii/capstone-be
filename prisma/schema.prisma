generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User{
  userId String @id @default(uuid())
  email String @unique
  fullname String 
  username String
  password String  
  profileImageUrl String?

  student Student?
  lecturer Lecturer?
  academic Academic?

  roles Role[]

  @@map("users")
}


model Role{
  roleId String @id @default(uuid())
  roleName String
  
  users User[]

  @@map("roles")
}

model Student{
  nim String @id 
  sks Int @db.UnsignedInt
  year Int @db.UnsignedInt

  userId String @unique
  user User @relation(fields: [userId], references: [userId],onDelete: Cascade)

  supervisorNip String? 
  lecturer Lecturer? @relation(fields: [supervisorNip],references: [nip])

  consultations Consultation[]
  
  
  logbooks Logbook[]
  documents Document[]
  notificationReads NotificationRead[]


  @@map("students")
}

model Lecturer{
  nip String @id 

  userId String @unique
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  students Student[]

  @@map("lecturers")
}

model Academic{
  nip String @id 

  userId String @unique
  user User @relation(fields: [userId], references: [userId],onDelete: Cascade)
  annoucements Announcement[]  

  @@map("academics")
}

model Announcement{
  announcementId String @id @default(uuid())
  title String
  content String @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime?
  imageUrl String?
  fileUrl String?

  academicNip String
  academic Academic @relation(fields: [academicNip],references: [nip])  

  @@map("announcements")
}

enum Status{
  UNREAD
  READ
}

model Notification{
  id String @id @default(uuid())
  title String
  content String
  fileUrl String?    
  
  notificationReads NotificationRead[]
  
  @@map("notifications")
}


model NotificationRead{
  notificationId String
  studentNim String
  status Status @default(UNREAD)
  readAt DateTime?

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentNim],references: [nim])

  @@id([notificationId,studentNim])
  @@map("notificationReads")
}


model Logbook{
  logbookId String @id @default(uuid())
  description String
  imageUrl String
  imageOriginalName String
  duration Int
  createdAt DateTime @default(now())
  updatedAt DateTime?
  note String? @db.Text

  nim String  
  student Student @relation(fields: [nim],references: [nim],onDelete: Cascade)


  @@map("logbooks")
}

enum ConsultationStatus{
  PENDING
  ACCEPTED
  REJECTED
}
model Consultation{
  consultationId String @id @default(uuid())
  fullname String
  nim String
  agencyName String
  position String
  activityDescription String
  createdAt DateTime @default(now())
  note String?
  agreementStatus ConsultationStatus @default(PENDING)

  studentNim String
  student Student @relation(fields: [studentNim], references: [nim])

  @@map("consultations")
}

enum DocumentStatus{
  DOCUMENT_VERIFICATION 
  DOCUMENT_REVISION 
  LECTURER_SIGNATURE_PROCESS 
  SUPERVISOR_SELECTION 
  SUPERVISOR_CONFIRMATION 
  COMPLETED 
}

model Document{
  documentId String @id @default(uuid())
  name String
  nim String
  phoneNumber String
  email String
  createdAt DateTime @default(now())
  status DocumentStatus @default(DOCUMENT_VERIFICATION)
  rejectionReason String? @db.Text  
  isGroup Boolean

  studentNim String
  student Student @relation(fields: [studentNim],references: [nim])  

  internshipApplicationCompany InternshipApplicationCompany?
  internshipApplicationCompetition InternshipApplicationCompetition?
  internshipExtension InternshipExtension?
  internshipCancellation InternshipCancellation?
  
  @@map("documents")
}


model InternshipApplicationCompany{
  documentId String @id  
  agencyName String
  agencyAddress String
  totalSks String
  startDate DateTime
  finishDate DateTime
  internshipObject String
  recipientOfLetter String
  studyResultCardUrl String
  letterApprovalSupervisorUrl String?
  coverLetterUrl String?

  document Document @relation(fields: [documentId], references: [documentId], onDelete: Cascade)  


  @@map("internshipApplicationCompanies")
}

model InternshipApplicationCompetition{
  documentId String @id
  totalSks String
  competitionName String
  competitionSupervisor String
  competitionCategory String
  competitionOrganizer String
  competitionInformation String
  competitionLevel String
  competitionWinner String
  competitionProduct String
  competitionStartDate DateTime
  competitionFinishDate DateTime

  studyResultCardUrl String
  proposalCompetitionSertificationUrl String  
  internshipVerificationCompetitionLetterUrl String?
  internshipDeterminationCompetitionLetterUrl String?
  letterApprovalSupervisorUrl String?

  document Document @relation(fields: [documentId], references: [documentId], onDelete: Cascade)  
  @@map("internshipApplicationCompetitions")
}

model InternshipExtension{
  documentId String @id
  totalSks String
  agencyName String
  agencyAddress String
  startDatePeriod DateTime
  finishDatePeriod DateTime
  startExtensionDatePeriod DateTime    
  finishExtensionDatePeriod DateTime
  reasonExtension String @db.Text
  internshipApplicationFileUrl String
  internshipExtensionFileUrl String

  document Document @relation(fields: [documentId],references: [documentId],onDelete: Cascade)

  @@map("internshipExtensions")
}

model InternshipCancellation{
  documentId String @id
  agencyName String
  agencyAddress String
  cancellationReason String  
  supportingDocumentUrl String

  document Document @relation(fields: [documentId],references: [documentId],onDelete: Cascade)

  @@map("internshipCancellations")
}

model Partner {
  partnerId String @id @default(uuid())
  email String @unique
  name String 
  address String
  description String
  partnerUrl String
  logoUrl String?
  createdAt DateTime @default(now())  

  @@map("partners")
}

